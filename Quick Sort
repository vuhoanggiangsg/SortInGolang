package main

import (
    "fmt"
)

func swap(arr []int, i, j int) {
    arr[i], arr[j] = arr[j], arr[i]
}

func partition(arr []int, low, high int) int {
    pivot := arr[high] // pivot element
    i := low - 1      // index of smaller element

    for j := low; j <= high-1; j++ {
        // If current element is smaller than or equal to pivot
        if arr[j] <= pivot {
            i++ // increment index of smaller element
            swap(arr, i, j)
        }
    }
    swap(arr, i+1, high)
    return i + 1
}

func quickSort(arr []int, low, high int) {
    if low < high {
        // pi is partitioning index, arr[pi] is now at right place
        pi := partition(arr, low, high)

        // Separately sort elements before partition and after partition
        quickSort(arr, low, pi-1)
        quickSort(arr, pi+1, high)
    }
}

func printArray(arr []int) {
    for _, value := range arr {
        fmt.Print(value, " ")
    }
    fmt.Println()
}

func main() {
    arr := []int{10, 7, 8, 9, 1, 5}
    n := len(arr)
    quickSort(arr, 0, n-1)
    fmt.Println("Sorted array:")
    printArray(arr)
}
